<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git 操作</title>
      <link href="/2023/01/10/git-geng-gai-yuan-cheng-cang-ku/"/>
      <url>/2023/01/10/git-geng-gai-yuan-cheng-cang-ku/</url>
      
        <content type="html"><![CDATA[<h2 id="git-更改远程仓库"><a href="#git-更改远程仓库" class="headerlink" title="git 更改远程仓库"></a>git 更改远程仓库</h2><blockquote><p>git remote set-url origin &lt;&lt;&gt;&gt;</p></blockquote><h2 id="git-提交跳过验证"><a href="#git-提交跳过验证" class="headerlink" title="git 提交跳过验证"></a>git 提交跳过验证</h2><blockquote><p>git commit –no-verify -m “.”</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vite 打包问题</title>
      <link href="/2023/01/05/vite-da-bao-wen-ti/"/>
      <url>/2023/01/05/vite-da-bao-wen-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="react项目使用vite构建，直接build生成的结果，打开index-html会出现空白界面"><a href="#react项目使用vite构建，直接build生成的结果，打开index-html会出现空白界面" class="headerlink" title="react项目使用vite构建，直接build生成的结果，打开index.html会出现空白界面"></a>react项目使用vite构建，直接build生成的结果，打开index.html会出现空白界面</h3><p>解决方法：</p><ul><li><p>修改<code>vite.config.ts</code>文件,添加base</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>base<span class="token operator">:</span><span class="token string">"./"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>添加<code>@vitejs/plugin-legacy</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> legacy <span class="token keyword">from</span> <span class="token string">"@vitejs/plugin-legacy"</span>plugins<span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token function">legacy</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>     targets<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"defaults"</span><span class="token punctuation">,</span> <span class="token string">"not IE 11"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改index.html</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>React App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>The web<span class="token punctuation">'</span>s most popular Jamstack React template<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>og:title<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>og:type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>og:url<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>og:image<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./favicon.ico<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>any<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apple-touch-icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./logo192.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>manifest<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./site.manifest<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>theme-color<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#fafafa<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./assets/react.5d6d6976.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./assets/firebase.53476f90.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./assets/index.eea50895.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>noscript</span><span class="token punctuation">></span></span>You need to enable JavaScript to run this app.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>noscript</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>data<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>application/json<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vite-legacy-polyfill<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./assets/polyfills-legacy.c9dd217b.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vite-legacy-entry<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./assets/index-legacy.792d0775.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>移除 <code>&lt;script type=module&gt;</code> 元素</li><li>移除其他 <code>&lt;script&gt;</code> 的 <code>nomodule</code> 属性</li><li>移除 <code>&lt;script id=vite-legacy-entry&gt;</code> 元素的内容，并把 <code>data-src</code> 属性名改为 <code>src</code></li><li>移除 SystemJS loader 代码（那个压缩到一行的 <code>&lt;script&gt;</code>）</li><li>修改所有资源地址为相对地址（例如把 <code>/assets/index-legacy.xxxx.js</code> 改为 <code>./assets/index-legacy.xxxx.js</code>，注意还有 CSS 文件）</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python selenium 使用</title>
      <link href="/2022/12/30/python-selenium-shi-yong/"/>
      <url>/2022/12/30/python-selenium-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h1><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>common <span class="token keyword">import</span> NoSuchElementException<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> EC<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>wait <span class="token keyword">import</span> WebDriverWait<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>remote<span class="token punctuation">.</span>webelement <span class="token keyword">import</span> WebElement<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="通过css找到指定元素"><a href="#通过css找到指定元素" class="headerlink" title="通过css找到指定元素"></a>通过css找到指定元素</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">browser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>CSS_SELECTOR<span class="token punctuation">,</span><span class="token string">'iframe[title="reCAPTCHA"]'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>By</strong>:</p><ul><li>By.CSS_SELECTOR: 通过css</li><li>By.TAG_NAME: 通过tag</li></ul><h2 id="Cookies设置"><a href="#Cookies设置" class="headerlink" title="Cookies设置"></a>Cookies设置</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">cookies <span class="token operator">=</span> browser<span class="token punctuation">.</span>get_cookies<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">browser<span class="token punctuation">.</span>add_cookies<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="获取源代码"><a href="#获取源代码" class="headerlink" title="获取源代码"></a>获取源代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">browser<span class="token punctuation">.</span>page_source<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">http:&#x2F;&#x2F;127.0.0.1:9997&#x2F;buy?event&#x3D;188254&amp;ticketId&#x3D;xxx&amp;need_select&#x3D;True&amp;ticketNum&#x3D;1&amp;select_num&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">site:linkedin.com&#x2F;in&#x2F; AND &quot;python developer&quot; AND &quot;London&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux使用crontab执行定时任务</title>
      <link href="/2022/12/28/linux-shi-yong-crontab-zhi-xing-ding-shi-ren-wu/"/>
      <url>/2022/12/28/linux-shi-yong-crontab-zhi-xing-ding-shi-ren-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux使用crontab执行定时任务"><a href="#Linux使用crontab执行定时任务" class="headerlink" title="Linux使用crontab执行定时任务"></a>Linux使用crontab执行定时任务</h1><h2 id="服务命令"><a href="#服务命令" class="headerlink" title="服务命令"></a>服务命令</h2><ul><li>启动服务：/sbin/service cron start</li><li>关闭服务：/sbin/service cron stop</li><li>重启服务：/sbin/service cron restart</li><li>重新载入配置：/sbin/service cron reload</li></ul><h2 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h2><ul><li>crontab -l //列出服务内容</li><li>corntab -r //删除服务</li><li>Corntab -e //编辑服务</li></ul><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>每一条定时任务都由以下几个部分组成：<br> | 分 | 小时 | 日 | 月 | 星期 | 命令 |</p><p>0-59 0-23 1-31 1-12 0-6 command(取值范围,0表示周日一般一行对应一个任务)</p><p>command放脚本文件，这样就能定时执行脚本内容。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB</title>
      <link href="/2022/06/19/mongodb/"/>
      <url>/2022/06/19/mongodb/</url>
      
        <content type="html"><![CDATA[<h4 id="1-Mongoose操作schema时默认表名添加s以及解决"><a href="#1-Mongoose操作schema时默认表名添加s以及解决" class="headerlink" title="1. Mongoose操作schema时默认表名添加s以及解决"></a>1. Mongoose操作schema时默认表名添加s以及解决</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../config/mongoose'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//model构造方法有四个参数：</span><span class="token comment">// name ：为模型model的名称；</span><span class="token comment">// schema ：为mongodb的document映射的schema；</span><span class="token comment">// collection ： 为真正的collection名称；</span><span class="token comment">// skipInit ： 为是否跳过初始化，默认为false.</span><span class="token comment">// 当collection缺失时，该方法会将name参数根据一定的规则转换成Mongodb中的collection的名称。</span><span class="token keyword">const</span> Product<span class="token operator">=</span>mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">'product'</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">mongoose<span class="token punctuation">.</span>Schema</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    name<span class="token operator">:</span>String<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//这里生成的数据库collection名称 默认为 products</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Product<span class="token comment">//解决表名默认处理的方法：</span><span class="token comment">//  如果不想使用model方法默认的model的name转换为collection的name，</span><span class="token comment">//  则只需要传递三个参数即可，其中最后一个参数真正的collection的name.如：</span><span class="token comment">//</span><span class="token keyword">const</span> Product<span class="token operator">=</span>mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">'product'</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">mongoose<span class="token punctuation">.</span>Schema</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    name<span class="token operator">:</span>String<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'product123'</span><span class="token punctuation">)</span><span class="token comment">// 其中 product123 为数据库中的collection的名称</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-Warning-on-Connectin-to-MongoDB-with-server"><a href="#2-Warning-on-Connectin-to-MongoDB-with-server" class="headerlink" title="2. Warning on Connectin to MongoDB with server"></a>2. Warning on Connectin to MongoDB with server</h4><blockquote><p>(node:3500) DeprecationWarning: current Server Discovery and Monitoring engine is deprecated, and will be removed in a future version. To use the new Server Discover and Monitoring engine, pass option { useUnifiedTopology: true } to MongoClient.connect. Connected MongoDB: mongodb://127.0.0.1:27017 Database: game-of-thrones</p></blockquote><p>解决方法：</p><pre class="line-numbers language-none"><code class="language-none">MongoClient.connect(&quot;mongodb:&#x2F;&#x2F;localhost:27017&#x2F;YourDB&quot;, &#123;  useNewUrlParser: true,  useUnifiedTopology: true&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>useUnifiedTopology</code> 在Mongo 3.1.0加入</p><h4 id="3-聚合查询"><a href="#3-聚合查询" class="headerlink" title="3. 聚合查询"></a>3. 聚合查询</h4><h4 id="4-MongoDB启动"><a href="#4-MongoDB启动" class="headerlink" title="4. MongoDB启动"></a>4. MongoDB启动</h4><blockquote><p>mongod –dbpath /usr/local/var/mongodb –logpath /usr/local/var/log/mongodb/mongo.log –fork</p></blockquote><p><a href="mailto:&#121;&#97;&#x6e;&#103;&#109;&#x69;&#110;&#103;&#120;&#105;&#110;&#x40;&#x76;&#103;&#x6f;&#97;&#x70;&#112;&#46;&#99;&#x6f;&#x6d;">&#121;&#97;&#x6e;&#103;&#109;&#x69;&#110;&#103;&#120;&#105;&#110;&#x40;&#x76;&#103;&#x6f;&#97;&#x70;&#112;&#46;&#99;&#x6f;&#x6d;</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 服务操作</title>
      <link href="/2022/05/19/redis/"/>
      <url>/2022/05/19/redis/</url>
      
        <content type="html"><![CDATA[<h4 id="如何停止-重启-启动Redis服务"><a href="#如何停止-重启-启动Redis服务" class="headerlink" title="如何停止/重启/启动Redis服务"></a>如何停止/重启/启动Redis服务</h4><p><strong>如果是用<a href="https://so.csdn.net/so/search?q=apt&spm=1001.2101.3001.7020">apt</a>-get或者yum install安装的redis，可以直接通过下面的命令停止/启动/重启redis</strong></p><blockquote><p>/etc/<a href="https://so.csdn.net/so/search?q=init&spm=1001.2101.3001.7020">init</a>.d/redis-server stop<br>/etc/init.d/<a href="https://so.csdn.net/so/search?q=redis&spm=1001.2101.3001.7020">redis</a>-server start<br>/etc/init.d/redis-<a href="https://so.csdn.net/so/search?q=server&spm=1001.2101.3001.7020">server</a> restart</p></blockquote><p><strong>如果是通过<a href="https://so.csdn.net/so/search?q=%E6%BA%90%E7%A0%81&spm=1001.2101.3001.7020">源码</a>安装的redis，则可以通过redis的客户端程序redis-cli的shutdown命令来重启redis</strong></p><p><strong>1.redis关闭</strong></p><blockquote><p>redis-cli -h 127.0.0.1 -p 6379 shutdown</p></blockquote><p><strong>2.redis启动</strong></p><blockquote><p>redis-server</p></blockquote><p><em><strong>如果上述方式都没有成功停止redis，则可以使用终极武器 kill -9</strong></em></p><p>​    </p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bootstrap-switch使用</title>
      <link href="/2022/04/19/bootstrap-switch-shi-yong/"/>
      <url>/2022/04/19/bootstrap-switch-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="bootstrap-switch"><a href="#bootstrap-switch" class="headerlink" title="bootstrap-switch"></a>bootstrap-switch</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote><p><a href="https://github.com/Bttstrp/bootstrap-switch">https://github.com/Bttstrp/bootstrap-switch</a></p></blockquote><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><strong>初始化</strong></li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/plugins/bootstrap-switch/js/bootstrap-switch.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">data-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>customers_create<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>customer-created-switch<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">data-bootstrap-switch</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[data-bootstrap-switch]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bootstrapSwitch</span><span class="token punctuation">(</span><span class="token string">'state'</span><span class="token punctuation">,</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">'checked'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>event</strong></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".customer-created-switch"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"switchChange.bootstrapSwitch"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li><strong>设置状态</strong></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[data-bootstrap-switch]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bootstrapSwitch</span><span class="token punctuation">(</span><span class="token string">'state'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token operator">/</span><span class="token boolean">false</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li><strong>禁用</strong></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[data-bootstrap-switch]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bootstrapSwitch</span><span class="token punctuation">(</span><span class="token string">'disabled'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token operator">/</span><span class="token boolean">false</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack和ES6构建NPM包</title>
      <link href="/2021/12/10/webpack-he-es6-gou-jian-npm-bao/"/>
      <url>/2021/12/10/webpack-he-es6-gou-jian-npm-bao/</url>
      
        <content type="html"><![CDATA[<h1 id="Webpack和ES6构建NPM包"><a href="#Webpack和ES6构建NPM包" class="headerlink" title="Webpack和ES6构建NPM包"></a>Webpack和ES6构建NPM包</h1><p>webpack.config.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> UglifyJsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"uglifyjs-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">dir</span><span class="token punctuation">)</span> <span class="token operator">=></span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> isProd <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">"production"</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  node<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    fs<span class="token operator">:</span> <span class="token string">'empty'</span><span class="token punctuation">,</span>    net<span class="token operator">:</span> <span class="token string">'empty'</span><span class="token punctuation">,</span>    tls<span class="token operator">:</span> <span class="token string">'empty'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  target<span class="token operator">:</span><span class="token string">"node"</span><span class="token punctuation">,</span>  entry<span class="token operator">:</span> <span class="token string">"./src/index.js"</span><span class="token punctuation">,</span>  output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 输出目录</span>    filename<span class="token operator">:</span> <span class="token string">"[name].js"</span><span class="token punctuation">,</span> <span class="token comment">// 输出文件</span>    libraryTarget<span class="token operator">:</span> <span class="token string">"umd"</span><span class="token punctuation">,</span>  <span class="token comment">// 配置如何暴露 library。'var' - （默认值）当 library 加载完成，入口起点的返回值将分配给一个变量。'assign' - 这将产生一个隐含的全局变量，可能会潜在地重新分配到全局中已存在的值（谨慎使用）。"this" - 入口起点的返回值将分配给 this 的一个属性（此名称由 output.library 定义）。'window' - 入口起点的返回值将使用 output.library 中定义的值，分配给 window 对象的这个属性下。'global' - 入口起点的返回值将使用 output.library 中定义的值，分配给 global 对象的这个属性下。'commonjs' - 入口起点的返回值将使用 output.library 中定义的值，分配给 exports 对象，output.library 会被省略。这个名称也意味着，模块用于 CommonJS 环境。'commonjs2' - 入口起点的返回值将分配给 module.exports 对象。这个名称也意味着模块用于 CommonJS 环境。'amd' - 将你的 library 暴露为 AMD 模块。'umd' - 将 library 暴露为所有的模块定义下都可运行的方式，它将在 CommonJS, AMD 环境下运行，或将模块导出到 global 下的变量</span>    library<span class="token operator">:</span> <span class="token string">"MyLibrary"</span><span class="token punctuation">,</span>  <span class="token comment">// 表示以什么名字输出。将 library 指定为一个对象，用于给每个 target 起不同的名称 library: &#123; root: 'MyLibrary', amd: 'my-library', commonjs: 'my-common-library' &#125;</span>    libraryExport<span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>  <span class="token comment">// 配置公开哪些模块。使用export default语法导出，需要设置为 default，否则引入的库需要使用.default才能引用到导出的对象</span>    umdNamedDefine<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// 对 UMD 的构建过程中的 AMD 模块进行命名，否则就使用匿名的 define</span>    globalObject<span class="token operator">:</span> <span class="token string">"this"</span><span class="token punctuation">,</span>  <span class="token comment">// 指定挂载这个库的全局对象，默认值是 window。非浏览器环境没有 window 对象，Node.js 中报错 window is not defined，当构建 UMD 包需要兼容浏览器和 Node.js 环境时，值应该设为 this</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  devtool<span class="token operator">:</span> <span class="token string">"#source-map"</span><span class="token punctuation">,</span>  module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    rules<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(js)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        loader<span class="token operator">:</span> <span class="token string">"eslint-loader"</span><span class="token punctuation">,</span>        enforce<span class="token operator">:</span> <span class="token string">"pre"</span><span class="token punctuation">,</span>        include<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          formatter<span class="token operator">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"eslint-friendly-formatter"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        loader<span class="token operator">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>        exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(node_modules)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  plugins<span class="token operator">:</span> isProd    <span class="token operator">?</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          parallel<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          uglifyOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            warnings<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            mangle<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          sourceMap<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span>    <span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>NamedModulesPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>NoEmitOnErrorsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h3><h4 id="1-配置eslint"><a href="#1-配置eslint" class="headerlink" title="1. 配置eslint"></a>1. 配置eslint</h4><blockquote><p>安装完eslint，然后安装别的库时，出现报错 eslint init No files matching the pattern “init” were found.</p></blockquote><p>安装的eslint是v8.4.1，eslint v8不在支持 Node.js 10, 13 和15. 本地环境是node v15.6.0，所以会报错。</p><blockquote><p>Promise is not defined</p></blockquote><p>eslint 配置问题，需要在<code>env</code>添加<code>”es6&quot;:true</code></p><h4 id="2-解决Parsing-error-Invalid-ecmaVersion问题"><a href="#2-解决Parsing-error-Invalid-ecmaVersion问题" class="headerlink" title="2. 解决Parsing error: Invalid ecmaVersion问题"></a>2. 解决Parsing error: Invalid ecmaVersion问题</h4><p>.eslintrc.json</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"env"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"browser"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token property">"node"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token property">"commonjs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"es6"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token string">"eslint:recommended"</span><span class="token punctuation">,</span>    <span class="token property">"parserOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"ecmaVersion"</span><span class="token operator">:</span> <span class="token number">2015</span><span class="token punctuation">,</span>        <span class="token property">"sourceType"</span><span class="token operator">:</span> <span class="token string">"module"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"rules"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>parseOptions.ecmaVersion</code> 自动生成为 13 版本不正确</p><blockquote><p>默认设置为 3，5（默认）， 你可以使用 6、7、8、9 或 10 来指定你想要使用的 ECMAScript 版本。你也可以用使用年份命名的版本号指定为 2015（同 6），2016（同 7），或 2017（同 8）或 2018（同 9）或 2019 (same as 10)</p></blockquote><h4 id="3-Can’t-resolve-‘net’-in-‘node-modules-forever-agent’"><a href="#3-Can’t-resolve-‘net’-in-‘node-modules-forever-agent’" class="headerlink" title="3. Can’t resolve ‘net’ in ‘node_modules/forever-agent’"></a>3. Can’t resolve ‘net’ in ‘node_modules/forever-agent’</h4><p>需要在webpack.config.js中添加</p><pre class="line-numbers language-none"><code class="language-none">node: &#123;    fs: &#39;empty&#39;,    net: &#39;empty&#39;,    tls: &#39;empty&#39;  &#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/request/request/issues/1529#issuecomment-103454943">request库的问题导致</a></p><h4 id="4-Webpack-babel-loader-runtime-Module-build-failed-TypeError-this-setDynamic-is-not-a-function"><a href="#4-Webpack-babel-loader-runtime-Module-build-failed-TypeError-this-setDynamic-is-not-a-function" class="headerlink" title="4. Webpack babel-loader runtime: Module build failed: TypeError: this.setDynamic is not a function"></a>4. <a href="https://stackoverflow.com/questions/48366243/webpack-babel-loader-runtime-module-build-failed-typeerror-this-setdynamic-is">Webpack babel-loader runtime: Module build failed: TypeError: this.setDynamic is not a function</a></h4><p>需要安装</p><p><code>npm install --save-dev @babel/plugin-transform-runtime </code></p><p><code>npm install --save @babel/runtime</code></p><p>并在<code>.babelrc</code>中配置</p><pre class="line-numbers language-none"><code class="language-none">&#123;...&quot;plugins&quot;:[...&quot;@babel&#x2F;plugin-transform-runtime&quot;,]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-warnings-is-not-a-supported-option-Error-from-UglifyJs"><a href="#5-warnings-is-not-a-supported-option-Error-from-UglifyJs" class="headerlink" title="5. warnings is not a supported option, Error from UglifyJs"></a>5. <a href="https://stackoverflow.com/questions/55989693/warnings-is-not-a-supported-option-error-from-uglifyjs"><code>warnings</code> is not a supported option, Error from UglifyJs</a></h4><pre class="line-numbers language-none"><code class="language-none">new UglifyJsPlugin(&#123;        parallel: true,        uglifyOptions: &#123;          compress: &#123;            warnings: false          &#125;,          mangle: true        &#125;,        sourceMap: true      &#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改成：</p><pre class="line-numbers language-none"><code class="language-none">new UglifyJsPlugin(&#123;          parallel: true,          uglifyOptions: &#123;            warnings: false,            mangle: true,          &#125;,          sourceMap: true,        &#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-ReferenceError-window-is-not-defined"><a href="#6-ReferenceError-window-is-not-defined" class="headerlink" title="6. ReferenceError: window is not defined"></a>6. ReferenceError: window is not defined</h4><p>webpack.config.js 添加 target:”node”</p><h4 id="7-require-“-lib”-需要添加default"><a href="#7-require-“-lib”-需要添加default" class="headerlink" title="7. require(“../lib”) 需要添加default"></a>7. require(“../lib”) 需要添加default</h4><p>添加<code>babel-plugin-add-module-exports</code>，并设置<code>.babelrc</code></p><pre class="line-numbers language-none"><code class="language-none">&#123;...&quot;plugins&quot;:[...&quot;add-module-exports&quot;,]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就可以使用CommonJS引入 <code>var a = require(&quot;library&quot;)</code>而不用<code>var a = require(&quot;library&quot;).default</code></p><p><a href="https://juejin.cn/post/6844903520865386510">参考</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> node js webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery</title>
      <link href="/2021/12/10/jquery/"/>
      <url>/2021/12/10/jquery/</url>
      
        <content type="html"><![CDATA[<h1 id="jQuery删除子元素"><a href="#jQuery删除子元素" class="headerlink" title="jQuery删除子元素"></a>jQuery删除子元素</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"#idName"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> HTML jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stripe HTML接入</title>
      <link href="/2021/11/08/stripe-html-jie-ru/"/>
      <url>/2021/11/08/stripe-html-jie-ru/</url>
      
        <content type="html"><![CDATA[<h2 id="Stripe-HTML接入"><a href="#Stripe-HTML接入" class="headerlink" title="Stripe HTML接入"></a>Stripe HTML接入</h2><h3 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h3><ol><li>用户输入卡号</li><li>验证卡号是否可用</li><li>保存卡号</li><li>付款</li></ol><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li><a href="https://dashboard.stripe.com/">后台</a></li><li><a href="https://stripe.com/docs/">文档</a></li><li><a href="https://stripe.com/docs/js">js文档</a></li></ol><p>首先进入stripe后台，切换成测试模式，获取开发者选项中的API秘钥</p><p>秘钥分为可发布秘钥（pk_)和秘钥(sk_)两中，sk秘钥用于后端，pk秘钥用于客户端</p><h3 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h3><hr><blockquote><p>首先要为网站用户创建一个对应stripe的customer，用于保存支付方法，付款等操作：</p></blockquote><p>后台：</p><ol><li><strong>引入stripe</strong></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> stripe <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'stripe'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">"sk_test_***"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li><strong>创建用户</strong></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> customer <span class="token operator">=</span> <span class="token keyword">await</span> stripe<span class="token punctuation">.</span>customers<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li><strong>获取用户信息</strong></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> customer <span class="token operator">=</span> <span class="token keyword">await</span> stripe<span class="token punctuation">.</span>customers<span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><blockquote><p>前端请求的时候判断customer中有没有保存的卡片信息，如果没有需要用户输入银行卡信息：</p></blockquote><ol start="4"><li><strong>后台获取卡信息</strong></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//获取customer</span><span class="token keyword">const</span> customer <span class="token operator">=</span>  <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">retrieveCustomer</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token comment">//判断有没有默认的卡片信息</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>customer<span class="token punctuation">.</span>default_source<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> card <span class="token operator">=</span> <span class="token keyword">await</span> stripe<span class="token punctuation">.</span>customers<span class="token punctuation">.</span><span class="token function">retrieveSource</span><span class="token punctuation">(</span>  id<span class="token punctuation">,</span>  customer<span class="token punctuation">.</span>default_source<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> card<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li><strong>创建一个SetupIntent,获取client_secret传到前端</strong></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> setupIntent <span class="token operator">=</span> <span class="token keyword">await</span> stripe<span class="token punctuation">.</span>setupIntents<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  customer<span class="token operator">:</span> customer_id<span class="token punctuation">,</span>  payment_method_types<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'card'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> setupIntent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> client_secret: setupIntent.client_secret</p></blockquote><ol start="6"><li><strong>前端UI 参考</strong>（<a href="https://stripe.com/docs/payments/save-and-reuse-cards-only?platform=web#web-test-integration%EF%BC%89">https://stripe.com/docs/payments/save-and-reuse-cards-only?platform=web#web-test-integration）</a></li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>setup-form<span class="token punctuation">"</span></span> <span class="token attr-name">data-secret</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; client_secret &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  //卡片信息输入框  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sr-input sr-element sr-card-element<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-element<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  //错误提示  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sr-field-error<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-errors<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alert<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  //提交按钮  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spinner hidden<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spinner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button-text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Link your card to your account<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>//展示卡片信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sr-result hidden<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Card setup completed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>make-payment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Make Payment<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delete-card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Delete Card<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://js.stripe.com/v3/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> stripe <span class="token operator">=</span> <span class="token function">Stripe</span><span class="token punctuation">(</span>    <span class="token string">"pk_test_"</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//1. 填充输入框，使用stripe的输入框</span>  <span class="token keyword">var</span> elements <span class="token operator">=</span> stripe<span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> style <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    base<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      fontSize<span class="token operator">:</span> <span class="token string">"16px"</span><span class="token punctuation">,</span>      color<span class="token operator">:</span> <span class="token string">"#32325d"</span><span class="token punctuation">,</span>      fontFamily<span class="token operator">:</span>        <span class="token string">"-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, sans-serif"</span><span class="token punctuation">,</span>      fontSmoothing<span class="token operator">:</span> <span class="token string">"antialiased"</span><span class="token punctuation">,</span>      <span class="token string">"::placeholder"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        color<span class="token operator">:</span> <span class="token string">"rgba(0,0,0,0.4)"</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> cardElement <span class="token operator">=</span> elements<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"card"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>style<span class="token operator">:</span> style<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cardElement<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#card-element"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2. 监听提交按钮</span>  <span class="token keyword">var</span> setupForm <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"setup-form"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> clientSecret <span class="token operator">=</span> setupForm<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>secret<span class="token punctuation">;</span>  setupForm<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"submit"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// We don't want to let default form submission happen here,</span>    <span class="token comment">// which would refresh the page.</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">changeLoadingState</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3. 验证卡片是否通过</span>    stripe      <span class="token punctuation">.</span><span class="token function">confirmCardSetup</span><span class="token punctuation">(</span>clientSecret<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        payment_method<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          card<span class="token operator">:</span> cardElement<span class="token punctuation">,</span>          billing_details<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">changeLoadingState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">var</span> displayError <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"card-errors"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          displayError<span class="token punctuation">.</span>textContent <span class="token operator">=</span> result<span class="token punctuation">.</span>error<span class="token punctuation">.</span>message<span class="token punctuation">;</span>          <span class="token comment">// Display error.message in your UI.</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>error<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>          <span class="token comment">// 4. 保存卡片信息</span>          stripe<span class="token punctuation">.</span><span class="token function">createToken</span><span class="token punctuation">(</span>cardElement<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token comment">// Inform the customer that there was an error.</span>              <span class="token keyword">var</span> errorElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'card-errors'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              errorElement<span class="token punctuation">.</span>textContent <span class="token operator">=</span> result<span class="token punctuation">.</span>error<span class="token punctuation">.</span>message<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>              <span class="token comment">// Send the token to your server.</span>              <span class="token comment">// 5. 把token发送到后台</span>              <span class="token function">stripeTokenHandler</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// The setup has succeeded. Display a success message.</span>          <span class="token function">orderComplete</span><span class="token punctuation">(</span>stripe<span class="token punctuation">,</span> clientSecret<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li><strong>后台处理token，添加卡片信息到customer</strong></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> card <span class="token operator">=</span> <span class="token keyword">await</span> stripe<span class="token punctuation">.</span>customers<span class="token punctuation">.</span><span class="token function">createSource</span><span class="token punctuation">(</span>  id<span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>source<span class="token operator">:</span>token<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> card<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="8"><li><strong>删除卡片</strong></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> customer <span class="token operator">=</span>  <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">retrieveCustomer</span><span class="token punctuation">(</span>cus_id<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>customer<span class="token punctuation">.</span>default_source<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> cards <span class="token operator">=</span> <span class="token keyword">await</span> stripe<span class="token punctuation">.</span>customers<span class="token punctuation">.</span><span class="token function">listSources</span><span class="token punctuation">(</span>  cus_id<span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>object<span class="token operator">:</span> <span class="token string">'card'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> card <span class="token operator">=</span> <span class="token keyword">await</span> stripe<span class="token punctuation">.</span>customers<span class="token punctuation">.</span><span class="token function">deleteSource</span><span class="token punctuation">(</span>  cus_id<span class="token punctuation">,</span>  customer<span class="token punctuation">.</span>default_source<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> card<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="9"><li><strong>付款</strong></li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> paymentMethods <span class="token operator">=</span> <span class="token keyword">await</span> stripe<span class="token punctuation">.</span>paymentMethods<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  customer<span class="token operator">:</span> customer_id<span class="token punctuation">,</span>  type<span class="token operator">:</span> <span class="token string">'card'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> paymentIntent <span class="token operator">=</span> <span class="token keyword">await</span> stripe<span class="token punctuation">.</span>paymentIntents<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    amount<span class="token operator">:</span> amount<span class="token punctuation">,</span>    currency<span class="token operator">:</span> <span class="token string">'usd'</span><span class="token punctuation">,</span>    customer<span class="token operator">:</span> customer_id<span class="token punctuation">,</span>    payment_method<span class="token operator">:</span> paymentMethods<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span>    off_session<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    confirm<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>success<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Bring the customer back on-session to authenticate the purchase</span>  <span class="token comment">// You can do this by sending an email or app notification to let them know</span>  <span class="token comment">// the off-session purchase failed</span>  <span class="token comment">// Use the PM ID and client_secret to authenticate the purchase</span>  <span class="token comment">// without asking your customers to re-enter their details</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">"authentication_required"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      error<span class="token operator">:</span> <span class="token string">"authentication_required"</span><span class="token punctuation">,</span>      paymentMethod<span class="token operator">:</span> err<span class="token punctuation">.</span>raw<span class="token punctuation">.</span>payment_method<span class="token punctuation">.</span>id<span class="token punctuation">,</span>      clientSecret<span class="token operator">:</span> err<span class="token punctuation">.</span>raw<span class="token punctuation">.</span>payment_intent<span class="token punctuation">.</span>client_secret<span class="token punctuation">,</span>      amount<span class="token operator">:</span> amount<span class="token punctuation">,</span>      card<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        brand<span class="token operator">:</span> err<span class="token punctuation">.</span>raw<span class="token punctuation">.</span>payment_method<span class="token punctuation">.</span>card<span class="token punctuation">.</span>brand<span class="token punctuation">,</span>        last4<span class="token operator">:</span> err<span class="token punctuation">.</span>raw<span class="token punctuation">.</span>payment_method<span class="token punctuation">.</span>card<span class="token punctuation">.</span>last4      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// The card was declined for other reasons (e.g. insufficient funds)</span>    <span class="token comment">// Bring the customer back on-session to ask them for a new payment method</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> error<span class="token operator">:</span> err<span class="token punctuation">.</span>code <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Unknown error occurred"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h3>]]></content>
      
      
      
        <tags>
            
            <tag> node js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何发布一个npm包</title>
      <link href="/2021/07/29/ru-he-fa-bu-yi-ge-npm-bao/"/>
      <url>/2021/07/29/ru-he-fa-bu-yi-ge-npm-bao/</url>
      
        <content type="html"><![CDATA[<h3 id="0-前提"><a href="#0-前提" class="headerlink" title="0.前提"></a>0.前提</h3><p>安装node环境</p><h3 id="1-注册npm账号"><a href="#1-注册npm账号" class="headerlink" title="1. 注册npm账号"></a>1. 注册npm账号</h3><p>官网地址：<a href="https://www.npmjs.com/">npm</a></p><p>需要记住用户名密码，发布的时候需要在终端输入</p><h3 id="2-初始化项目"><a href="#2-初始化项目" class="headerlink" title="2. 初始化项目"></a>2. 初始化项目</h3><ol><li><p>在GitHub上新建一个仓库并克隆到本地</p></li><li><p>在项目中执行</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm init -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>-y 可以减少确认步骤</p></blockquote></li><li><p>配置package.json文件</p><p>介绍一下相关的属性：</p><ul><li>name：即项目名</li></ul><ul><li><p>version：即包的版本</p></li><li><p>description：描述信息</p></li><li><p>main：指定入口文件</p></li><li><p>scripts：脚本命令</p></li><li><p>repository：源码仓库地址</p></li><li><p>keywords：关键词</p></li><li><p>author：作者信息</p></li><li><p>license：版权类型</p></li><li><p>bugs：bug反馈</p></li><li><p>homepage：项目主页</p></li></ul></li></ol><h3 id="3-开发npm包"><a href="#3-开发npm包" class="headerlink" title="3. 开发npm包"></a>3. 开发npm包</h3><p>因为兼容问题，npm包使用的时候必须是es5标准的JavaScript，所以如果想在npm包中使用es6的代码，需要使用到babel。</p><ol><li><p>babel配置</p><ol><li><p>添加<code>.babelrc</code>文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    <span class="token string">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"@babel/preset-env"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">[</span><span class="token string">"@babel/plugin-proposal-class-properties"</span><span class="token punctuation">,</span>          <span class="token punctuation">&#123;</span>              <span class="token string">"loose"</span><span class="token operator">:</span> <span class="token boolean">true</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>安装依赖</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install --save-dev @babel&#x2F;clinpm install --save-dev @babel&#x2F;corenpm install --save-dev @babel&#x2F;preset-envnpm i -D @babel&#x2F;plugin-proposal-class-properties<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编译代码</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npx babel src&#x2F; --out-dir lib<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>src/ 指需要编译的文件，lib 指输出的目录，package.json 里面的main需要指向lib里面的主文件</p></blockquote><p>可以将命令写到package.json里面</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>   <span class="token property">"compile"</span><span class="token operator">:</span> <span class="token string">"npx babel src/ --out-dir lib"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>直接运行</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm run compile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就可以了</p></li></ol></li><li><p>.npmignore 配置</p><p>为了防止我们不想上传的目录文件上传到npm库中，我们需要添加这个问题</p><p>例如：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">examples/node_modules/src/.babelrc.gitignore.npmignore<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="4-发布npm包"><a href="#4-发布npm包" class="headerlink" title="4. 发布npm包"></a>4. 发布npm包</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入用户名密码</p><p>然后编译发布</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm run compilenpm publish<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果新注册的npm的账号，会publish报错，需要到邮箱验证一下自己的账号</p><h3 id="5-npm包测试"><a href="#5-npm包测试" class="headerlink" title="5. npm包测试"></a>5. npm包测试</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install npm包名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果使用es6,需要配置babel，注意babel的版本问题，如果同时使用6.x和7.x会有运行问题</p><p>使用如下命令运行脚本文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npx babel-node index.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> node js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python知识</title>
      <link href="/2021/07/23/python/"/>
      <url>/2021/07/23/python/</url>
      
        <content type="html"><![CDATA[<h2 id="Requests-网络请求"><a href="#Requests-网络请求" class="headerlink" title="Requests 网络请求"></a>Requests 网络请求</h2><pre class="line-numbers language-none"><code class="language-none">headers &#x3D; &#123;&#125;payload&#x3D;&#39;a&#x3D;1&amp;b&#x3D;2&amp;c&#x3D;3&#39;requests.request(&quot;POST&quot;,url,headers &#x3D; headers,data &#x3D; payload)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>data不能是对象类型{a:1;b=2;c=3}</li><li>字符串拼接时，int需要转成str，例如 <code>&#39;a=1&amp;b=&#39;+str(i)+&#39;&amp;c=3&#39; </code></li></ol><h2 id="json库"><a href="#json库" class="headerlink" title="json库"></a>json库</h2><p><code>json.dumps()</code> 把json对象类型转成字符串，<strong>注意</strong>：json.dumps()方法会把中文字符转义成Unicode，需要添加第二次参数：json.dumps(object, <em>ensure_ascii</em>=False)</p><h2 id="pymysql-MySQL数据库"><a href="#pymysql-MySQL数据库" class="headerlink" title="pymysql MySQL数据库"></a>pymysql MySQL数据库</h2><p><strong>一、基本应用：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">//</span>charset 一般会使用utf8，但是utf8只支持三个字节，但是emoji表情是四个字节，所以使用utf8mb4db <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"localhost"</span><span class="token punctuation">,</span>user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token string">"123"</span><span class="token punctuation">,</span>database<span class="token operator">=</span><span class="token string">"test"</span><span class="token punctuation">,</span>charset<span class="token operator">=</span><span class="token string">"utf8mb4"</span><span class="token punctuation">)</span>cursor <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong></p><p><code>cursor.execute()</code>方法可以接受一个参数，也可以接受两个参数：</p><p>(1) <strong>cur.execute(“insert into resource(cid,name) values(%s, %s)” , (12,name) );</strong></p><p>​    这种格式是接受两个参数，MySQLdb会自动替你对字符串进行转义和加引号，不必再自己进行转义，执行完此语句之后，resource表中多了一条记录： 12  I’mHere</p><p>(2) <strong>cur.execute(“insert into resource(cid,name) values(%s, %s)” % (12,name) );</strong></p><p>​    这种格式是利用python的字符串格式化自己生成一个query，也就是传给execute一个参数，此时必须自己对字符串转义和增加引号，即上边的语句是错误的，应该修改为：<br>  name = MySQLdb.escape_string(name);<br>  cursor.execute(“insert into resource(cid,name) values(%s, ‘%s’)” % (12,name) );<br>  这样插入的记录才和(1)一样：12 I’mHere</p><p><strong>二、问题</strong></p><ol><li><p><em><strong>pymysql.err.OperationalError: (1136, “Column count doesn’t match value count at row 1”)</strong></em></p><p>cursor.execute(“insert into comments (product_id,content) values (%s,%s)”, (“50003381”,content1)) 中 content1是一个字符串，%s就不能匹配到，需要使用 ‘%s’ 匹配</p></li></ol><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><blockquote><p>$ bash mysql.server start</p><p>$ mysql -u root -p</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义View</title>
      <link href="/2020/11/20/zi-ding-yi-view/"/>
      <url>/2020/11/20/zi-ding-yi-view/</url>
      
        <content type="html"><![CDATA[<h1 id="如何在自定义View使用自定义属性"><a href="#如何在自定义View使用自定义属性" class="headerlink" title="如何在自定义View使用自定义属性"></a>如何在自定义View使用自定义属性</h1><p><strong>例如：</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.example.demos.customviewdemo.HistogramView</span>     <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">app:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@android:color/holo_red_light<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">app:</span>histogramColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@android:color/holo_blue_bright<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 <code>textColor</code> 和 <code>histogramColor</code> 即为自定义属性。</p><p>那么如何定义自己想要的属性呢？</p><ol><li>首先在res/values/下新建资源文件，这里我们命名为 attrs.xml，在其中编写所需要的属性</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>declare-styleable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HistogramView<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>textColor<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>histogramColor<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>declare-styleable</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>name</code>和我们自定义的View名字保持一致，attr为自定义属性，format 代表属性的类型，也可以是 <code>string</code>、<code>boolean</code>等。</p><ol start="2"><li>在自定义View中引入属性</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">HistogramView</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">AttributeSet</span> attrs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>    mPaint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mPath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TypedArray</span> typedArray <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">obtainStyledAttributes</span><span class="token punctuation">(</span>attrs<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>HistogramView<span class="token punctuation">)</span><span class="token punctuation">;</span>    mTextColor <span class="token operator">=</span> typedArray<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>HistogramView_textColor<span class="token punctuation">,</span><span class="token class-name">Color</span><span class="token punctuation">.</span>BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>    mHistogramColor <span class="token operator">=</span> typedArray<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>HistogramView_histogramColor<span class="token punctuation">,</span><span class="token class-name">Color</span><span class="token punctuation">.</span>GREEN<span class="token punctuation">)</span><span class="token punctuation">;</span>    typedArray<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在自定义View的构造函数中添加初始化属性的方法。</p><ol start="3"><li>在布局文件中设置属性值</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RelativeLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.example.demos.customviewdemo.HistogramView</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>textColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@android:color/holo_red_light<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>histogramColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@android:color/holo_blue_bright<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RelativeLayout</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>recyclelistview</title>
      <link href="/2019/12/24/recyclelistview/"/>
      <url>/2019/12/24/recyclelistview/</url>
      
        <content type="html"><![CDATA[<h3 id="recyclerlistview-的使用"><a href="#recyclerlistview-的使用" class="headerlink" title="recyclerlistview 的使用"></a>recyclerlistview 的使用</h3><p>由 <code>react-native-swipe-list-view</code> 替换成 <code>recyclerlistview</code></p><p><a href="https://github.com/Flipkart/recyclerlistview">github</a></p><p>性能明显提升，后者可以复用、回收 item</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>RecyclerListViewlayoutProvider<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>_layoutProvider<span class="token punctuation">&#125;</span>dataProvider<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>convoData<span class="token punctuation">&#125;</span>rowRenderer<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>_rowRenderer<span class="token punctuation">&#125;</span>externalScrollView<span class="token operator">=</span><span class="token punctuation">&#123;</span>ExtendedScrollView<span class="token punctuation">&#125;</span>onScroll<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>rowOpenIndex <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>rows<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>rowOpenIndex<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">closeRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>rowOpenIndex<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>scrollViewProps<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>header<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>scrollEnabled <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>scrollEnabled<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>layoutProvider : 设置item的宽高</li><li>dataProvider :  数据源</li><li>rowRenderer : item 的 UI</li><li>externalScrollView : 使用自己的 scrollview 替换库中原始的 scrollview (可以在ScrollView 中添加自己的 header )</li><li>onScroll : 滚动监听</li><li>scrollViewProps : scrollView 的参数 (如果使用 externalScrollview, 可以为自己的 Scrollview 设置参数)</li></ol><p><strong>局部刷新的实现</strong></p><p>使用 <code>DataProvider</code> 对数据源添加判断，例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> dataProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataProvider</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r1<span class="token punctuation">,</span> r2</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>r1 <span class="token operator">===</span> r2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> r1<span class="token punctuation">.</span>read <span class="token operator">!==</span> r2<span class="token punctuation">.</span>read <span class="token operator">||</span> r1<span class="token punctuation">.</span>lastMessage <span class="token operator">!==</span> r2<span class="token punctuation">.</span>lastMessage <span class="token operator">||</span> r1<span class="token punctuation">.</span>lastTime <span class="token operator">!==</span> r2<span class="token punctuation">.</span>lastTime<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> r1 <span class="token operator">!==</span> r2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加对数据源具体参数的判断。</p><p><strong>注意在更新数据时，如果想触发局部更新，需要使用深复制</strong> ：例如修改 x 的 read 属性，不能直接 <code>x[index].read = true</code> ，然后 setState 重新渲染，需要 </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> item <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>item<span class="token punctuation">.</span>read <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>x<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> react-native </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recyclelistview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反编译软件初识</title>
      <link href="/2019/07/13/decompile/"/>
      <url>/2019/07/13/decompile/</url>
      
        <content type="html"><![CDATA[<h1 id="入坑原因"><a href="#入坑原因" class="headerlink" title="入坑原因"></a>入坑原因</h1><p>在 Mac 上使用 Tower Git 管理软件挺好用，想在自己的 Windows 上安装使用一下，但是并没有找到破解版本，试用版怎么可以忍受，然后在52上发现一篇文章，介绍如何破解，so~ 开始了简单的破解之路。</p><h1 id="所需软件"><a href="#所需软件" class="headerlink" title="所需软件"></a>所需软件</h1><ol><li>de4dot<a href="https://github.com/0xd4d/de4dot/releases">下载地址</a></li><li>.NET Reflector（包含Reflexil插件）<a href="https://www.jb51.net/softs/629309.html#downintro2">下载地址</a><a href="http://reflexil.net/">插件地址</a></li></ol><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li><p>首先在<a href="https://www.git-tower.com/download/windows">官网</a>下载最新版的Tower，我使用的是2.3.2版本。</p></li><li><p>下载所需要的软件</p></li><li><p>进入de4dot的下载目录，运行如下命令</p><blockquote><p>de4dot.exe tower.exe所在路径</p></blockquote></li><li><p>此时Tower的安装目录中会生成一个Tower.Core.dll文件，将此文件拖入.NET Reflector就可以查看代码，然后按照这个大佬的<a href="https://www.52pojie.cn/thread-720504-1-1.html">截图</a>使用Reflexil插件修改代码即可。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 反编译 </tag>
            
            <tag> de4dot </tag>
            
            <tag> .Net Reflector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS搭建服务器</title>
      <link href="/2019/04/14/aws-da-jian-fu-wu-qi/"/>
      <url>/2019/04/14/aws-da-jian-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="需知"><a href="#需知" class="headerlink" title="需知"></a>需知</h1><blockquote><ol><li>亚马逊新注册用户可以免费使用一年EC2服务器</li><li>创建服务器需要绑定Visa信用卡，使用信用卡进行身份认证，会扣除一美元，一年之后如果没有超量，会返回到信用卡。</li></ol></blockquote><h1 id="创建EC2服务器"><a href="#创建EC2服务器" class="headerlink" title="创建EC2服务器"></a>创建EC2服务器</h1><ol><li><p>申请账号登录，需要信用卡信息；</p></li><li><p>选择服务器的地址，可以使用 <a href="https://www.cloudping.info/">测试网站</a> 观察哪个区域的速度比较快；</p><blockquote><p>国内的话东京的速度要快一些</p></blockquote></li><li><p>点击 service-&gt;EC2 , 创建实例，选择免费的服务器，进行服务器的配置，无脑下一步就好</p></li><li><p>Windows 下载 XShell 连接服务器安装 shadowsocks <a href="https://github.com/Alvin9999/new-pac/wiki/%E8%87%AA%E5%BB%BAss%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B">教程</a></p></li><li><p>配置AWS 安全组入站规则，<strong>自定义 TCP规则</strong> （shadowsocks设置的端口号）来源随便</p></li></ol><p><img src="https://ws1.sinaimg.cn/large/006d1CrTly1g261et5z94j30w607ujs0.jpg"></p><ol start="6"><li>注意密钥文件不能丢失。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> VPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android杂记</title>
      <link href="/2019/04/13/android-za-ji/"/>
      <url>/2019/04/13/android-za-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="拨号界面光标问题主要代码"><a href="#拨号界面光标问题主要代码" class="headerlink" title="拨号界面光标问题主要代码"></a>拨号界面光标问题主要代码</h3><pre class="line-numbers language-none"><code class="language-none">TextView text &#x3D; (TextView) arg1;Log.v(&quot;NUmber&quot;, text.getText().toString());int index&#x3D;editText.getSelectionStart();Editable edit &#x3D; editText.getEditableText();&#x2F;&#x2F;获取EditText的文字Log.d(TAG, &quot;onItemClick: &quot;+index+&quot; &quot;+edit.length());if (index &lt; 0 || index &gt;&#x3D; edit.length() )&#123;    edit.append(text.getText());    editText.clearFocus();&#125;else&#123;    edit.insert(index,text.getText());&#x2F;&#x2F;光标所在位置插入文字&#125;editText.setSelection(index + 1);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Picasso加载图片到size小的控件中会产生OOM"><a href="#Picasso加载图片到size小的控件中会产生OOM" class="headerlink" title="Picasso加载图片到size小的控件中会产生OOM"></a>Picasso加载图片到size小的控件中会产生OOM</h3><pre class="line-numbers language-none"><code class="language-none">Picasso.with(context.getApplicationContext()).load(url)                .resize(width, height)                .into(imageView);或Picasso.with(context.getApplicationContext()).load(url)                &#x2F;&#x2F;从dimen里面取                .resizeDimen(targetWidthResId, targetHeightResId)                .into(imageView);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="免责声明页面的dialog"><a href="#免责声明页面的dialog" class="headerlink" title="免责声明页面的dialog"></a>免责声明页面的dialog</h3><p>实现思路：<br>1.sp文件储存 是否不再提醒<br><br>2.判断sp返回的值，如果为true则弹窗<br>3.弹窗点击确定判断是否勾选CheckBox，从而改变sp的值。<br>4.点击取消退出应用。   </p><p>下面是部分代码：</p><pre class="line-numbers language-none"><code class="language-none">disclaimer &#x3D; LayoutInflater.from(this).inflate(R.layout.dialog_disclaimer, null);cb &#x3D; disclaimer.findViewById(R.id.cb);textView &#x3D; disclaimer.findViewById(R.id.disclaimer_tv);&#x2F;&#x2F;设置textview可以滚动textView.setMovementMethod(ScrollingMovementMethod.getInstance());if (!SharedPreferenceUtil.getIFTTT(this, KEY_DISCLAIMER_TIP, false)) &#123;    disclaimerDialog &#x3D; new android.app.AlertDialog.Builder(this)            .setTitle(R.string.statement)            .setView(disclaimer)&#x2F;&#x2F;自定义dialog            .setOnKeyListener(new DialogInterface.OnKeyListener() &#123;                @Override                public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) &#123;                    if (event.getKeyCode() &#x3D;&#x3D; KeyEvent.KEYCODE_SEARCH) &#123;                        return true;                    &#125;                    return false;                &#125;            &#125;)&#x2F;&#x2F;设置监听返回按钮，此处无用            .setNegativeButton(this.getResources().getString(R.string.cancel),                    new DialogInterface.OnClickListener() &#123;                        @Override                        public void onClick(DialogInterface dialog, int which) &#123;                            AppUtils.exitApp();                        &#125;                    &#125;)            .setPositiveButton(this.getResources().getString(R.string.sure),                    new DialogInterface.OnClickListener() &#123;                        @Override                        public void onClick(DialogInterface dialog, int which) &#123;                            if (cb.isChecked()) &#123;                                SharedPreferenceUtil.saveIFTTT(MainActivity3.this, KEY_DISCLAIMER_TIP, true);                            &#125; else &#123;                                SharedPreferenceUtil.saveIFTTT(MainActivity3.this, KEY_DISCLAIMER_TIP, false);                            &#125;                        &#125;                    &#125;).create();    &#x2F;&#x2F;设置dialog外面和返回键不能点击    disclaimerDialog.setCancelable(false);    disclaimerDialog.show();    &#x2F;&#x2F;设置dialog的宽度    WindowManager.LayoutParams lp &#x3D; Objects.requireNonNull(disclaimerDialog.getWindow()).getAttributes();    DisplayMetrics d &#x3D; this.getResources().getDisplayMetrics();    lp.width &#x3D; (int) (d.widthPixels * 0.98);    disclaimerDialog.getWindow().setAttributes(lp);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;可以滚动的TextView设置&lt;TextView    android:id&#x3D;&quot;@+id&#x2F;disclaimer_tv&quot;    android:layout_width&#x3D;&quot;match_parent&quot;    android:layout_height&#x3D;&quot;match_parent&quot;    android:text&#x3D;&quot;@string&#x2F;disclaimer&quot;    android:padding&#x3D;&quot;10dp&quot;    android:textSize&#x3D;&quot;16sp&quot;    android:lineSpacingMultiplier&#x3D;&quot;1.1&quot;    android:scrollbars&#x3D;&quot;vertical&quot;    android:scrollbarStyle&#x3D;&quot;outsideOverlay&quot;    android:scrollbarFadeDuration&#x3D;&quot;2000&quot;    android:layout_above&#x3D;&quot;@+id&#x2F;rl&quot;    &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新手引导页"><a href="#新手引导页" class="headerlink" title="新手引导页"></a>新手引导页</h3><p>使用huburt-Hu/NewbieGuide第三方库完成<br><a href="https://github.com/huburt-Hu/NewbieGuide">地址</a></p><pre class="line-numbers language-none"><code class="language-none">if (SharedPreferenceUtil.getIFTTT(this,&quot;isfer&quot;,true)) &#123;            HighlightOptions options &#x3D; new HighlightOptions.Builder()                    .setOnHighlightDrewListener(new OnHighlightDrewListener() &#123;                        @Override                        public void onHighlightDrew(Canvas canvas, RectF rectF) &#123;                            Paint paint &#x3D; new Paint();                            paint.setColor(Color.WHITE);                            paint.setStyle(Paint.Style.STROKE);                            paint.setStrokeWidth(5);                            paint.setPathEffect(new DashPathEffect(new float[]&#123;20, 20&#125;, 0));                            canvas.drawCircle(rectF.centerX(), rectF.centerY(), rectF.width() &#x2F; 2 + 10, paint);                        &#125;                    &#125;)                    .build();            HighlightOptions optionsRect &#x3D; new HighlightOptions.Builder()                    .setOnHighlightDrewListener(new OnHighlightDrewListener() &#123;                        @Override                        public void onHighlightDrew(Canvas canvas, RectF rectF) &#123;                            Paint paint &#x3D; new Paint();                            paint.setColor(Color.WHITE);                            paint.setStyle(Paint.Style.STROKE);                            paint.setStrokeWidth(5);                            paint.setPathEffect(new DashPathEffect(new float[]&#123;20, 20&#125;, 0));                            canvas.drawRect(rectF, paint);                        &#125;                    &#125;)                    .build();            Animation enterAnimation &#x3D; new AlphaAnimation(0f, 1f);            enterAnimation.setDuration(200);            enterAnimation.setFillAfter(true);            Animation exitAnimation &#x3D; new AlphaAnimation(1f, 0f);            exitAnimation.setDuration(200);            exitAnimation.setFillAfter(true);            guideController &#x3D; NewbieGuide.with(this)                    .setLabel(&quot;guide&quot;)                    .setOnPageChangedListener(new OnPageChangedListener() &#123;                        @Override                        public void onPageChanged(int i) &#123;                            guidePage &#x3D;i;                        &#125;                    &#125;)                    .setOnGuideChangedListener(new OnGuideChangedListener() &#123;                        @Override                        public void onShowed(Controller controller) &#123;                        &#125;                        @Override                        public void onRemoved(Controller controller) &#123;                            if (guidePage&#x3D;&#x3D;4)&#123;                                SharedPreferenceUtil.saveIFTTT(MainActivity3.this,&quot;isfer&quot;,false);                                guidePage&#x3D;5;                            &#125;                        &#125;                    &#125;)                    .setShowCounts(1)                    .addGuidePage(GuidePage.newInstance()                            .addHighLightWithOptions(mRlcirclSmile, HighLight.Shape.CIRCLE,0,-50,options)                            .setLayoutRes(R.layout.guide_osvice)                            .setEnterAnimation(enterAnimation)                            .setExitAnimation(exitAnimation))                    .addGuidePage(GuidePage.newInstance()                            .addHighLightWithOptions(mMusicBtn, HighLight.Shape.CIRCLE,0,-30,options)                            .addHighLightWithOptions(mCarsBtn, HighLight.Shape.CIRCLE,0,-30,options)                            .setLayoutRes(R.layout.guide_music)                            .setEnterAnimation(enterAnimation)                            .setExitAnimation(exitAnimation))                    .addGuidePage(GuidePage.newInstance()                            .addHighLightWithOptions(mPhoneBtn, HighLight.Shape.CIRCLE,0,-30,options)                            .addHighLightWithOptions(mAppsBtn, HighLight.Shape.CIRCLE,0,-30,options)                            .setLayoutRes(R.layout.guide_setting)                            .setEnterAnimation(enterAnimation)                            .setExitAnimation(exitAnimation))                    .addGuidePage(GuidePage.newInstance()                            .addHighLightWithOptions(mMapBtnWhere, HighLight.Shape.RECTANGLE,0,-40,optionsRect)                            .setLayoutRes(R.layout.guide_search)                            .setEnterAnimation(enterAnimation)                            .setExitAnimation(exitAnimation))                    .addGuidePage(GuidePage.newInstance()                            .addHighLightWithOptions(mMapbtnWhere_ho,HighLight.Shape.RECTANGLE,0,-40,optionsRect)                            .setLayoutRes(R.layout.guide_used)                            .setEnterAnimation(enterAnimation)                            .setExitAnimation(exitAnimation))                    .build();            if (guidePage&#x3D;&#x3D;0)&#123;                guideController.show();            &#125;else if (guidePage&#x3D;&#x3D;5)&#123;                SharedPreferenceUtil.saveIFTTT(this,&quot;isfer&quot;,false);                guideController.remove();                guideController&#x3D;null;            &#125;else&#123;                mMusicBtn.post(new Runnable() &#123;                    @Override                    public void run() &#123;                        guideController.showPage(guidePage);                    &#125;                &#125;);            &#125;        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="语音动画"><a href="#语音动画" class="headerlink" title="语音动画"></a>语音动画</h3><ul><li><p>自定义view：绘制渐变色的单个圆角矩形</p><ul><li><p>设置宽高</p><blockquote><p>setMeasuredDimension(LINE_W,getMeasuredHeight());</p></blockquote></li><li><p>设置view的一些属性，推荐使用typedArray方法</p><blockquote><p>TypedArray mTypedArray = context.obtainStyledAttributes(attrs, R.styleable.VoiceView);<br><br>   lineWidth =mTypedArray.getDimension(R.styleable.VoiceView_voiceLineWidth, LINE_W);<br><br>   mTypedArray.recycle();</p></blockquote></li><li><p>attrs_voiceview.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>declare-styleable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VoiceView<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>voiceLineColor<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>voiceLineWidth<span class="token punctuation">"</span></span> <span class="token attr-name">format</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dimension<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>declare-styleable</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>绘制渐变圆角矩形</p><pre class="line-numbers language-none"><code class="language-none">rectRight.left &#x3D; widthcentre - lineWidth&#x2F;2;rectRight.top &#x3D; heightcentre - getHeight()&#x2F;2;rectRight.right &#x3D; widthcentre  + lineWidth&#x2F;2;rectRight.bottom &#x3D; heightcentre + getHeight()&#x2F;2;&#x2F;&#x2F;渐变mShader &#x3D; new LinearGradient(widthcentre,heightcentre - getHeight()&#x2F;2,widthcentre,        heightcentre + getHeight()&#x2F;2,        new int[]&#123;0xF200a2ff,0xF2006cff,0xF26852e3&#125;,null,        Shader.TileMode.CLAMP);paint.setShader(mShader);canvas.drawRoundRect(rectRight, 100, 100, paint);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>设置阴影</p><blockquote><p>paint.setShadowLayer(10,5,5,0xa80013E0);<br>  <em>//需要开启硬件加速</em><br>  setLayerType(View.LAYER_TYPE_SOFTWARE, null);</p></blockquote></li></ul></li><li><p>七个居中分布的view，使用属性动画ValueAnimator对view改变高度，同时使用postDelayed()方法延迟操作旁边的view，从而达到波浪效果</p></li></ul><pre class="line-numbers language-none"><code class="language-none">voiceAnimator4 &#x3D; ValueAnimator.ofInt(voiceView4.getLayoutParams().height,height,75);voiceAnimator4.setDuration(600);voiceAnimator4.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;    @Override    public void onAnimationUpdate(ValueAnimator valueAnimator) &#123;        &#x2F;&#x2F;动态改变控件的高度，所以自定义的view的绘制需要依附设定的高度        voiceView4.getLayoutParams().height&#x3D; (int)(Integer)valueAnimator.getAnimatedValue();        voiceView4.requestLayout();    &#125;&#125;);voiceAnimator4.start();&#x2F;&#x2F;延迟150ms对后面的view进行更新voiceView4.postDelayed(new Runnable() &#123;    @Override    public void run() &#123;        voiceAnimator3 &#x3D; ValueAnimator.ofInt(voiceView3.getLayoutParams().height,height,75);        voiceAnimator3.setDuration(600);        voiceAnimator3.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;            @Override            public void onAnimationUpdate(ValueAnimator valueAnimator) &#123;                voiceView3.getLayoutParams().height&#x3D; (int) (Integer)valueAnimator.getAnimatedValue();                voiceView3.requestLayout();            &#125;        &#125;);        voiceAnimator5 &#x3D; ValueAnimator.ofInt(voiceView5.getLayoutParams().height,height,75);        voiceAnimator5.setDuration(600);        voiceAnimator5.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;            @Override            public void onAnimationUpdate(ValueAnimator valueAnimator) &#123;                voiceView5.getLayoutParams().height&#x3D; (int) (Integer)valueAnimator.getAnimatedValue();                voiceView5.requestLayout();            &#125;        &#125;);        voiceAnimator3.start();        voiceAnimator5.start();    &#125;&#125;,150);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>一、 开发分支（dev）上的代码达到上线的标准后，要合并到 master 分支</p><pre class="line-numbers language-none"><code class="language-none">git checkout devgit pullgit checkout mastergit merge devgit push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二、当master代码改动了，需要更新开发分支（dev）上的代码</p><pre class="line-numbers language-none"><code class="language-none">git checkout master git pull git checkout devgit merge master (rebase)git push -u origin dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="虚线view"><a href="#虚线view" class="headerlink" title="虚线view"></a>虚线view</h3><pre class="line-numbers language-none"><code class="language-none">public class DashedLine extends View &#123;private Paint paint &#x3D; null;private Path path &#x3D; null;private PathEffect pe &#x3D; null;public DashedLine(Context paramContext) &#123;super(paramContext, null);&#125;public DashedLine(Context paramContext, AttributeSet paramAttributeSet) &#123;super(paramContext, paramAttributeSet);TypedArray a &#x3D; paramContext.obtainStyledAttributes(paramAttributeSet,R.styleable.dashedline);&#x2F;&#x2F; 可通过TypedArray获得它的值当用户无设置值是采用默认值0XFFFFFFFFint lineColor &#x3D; a.getColor(R.styleable.dashedline_lineColor, 0XFFFFFFFF);a.recycle();this.paint &#x3D; new Paint();this.path &#x3D; new Path();this.paint.setStyle(Paint.Style.STROKE);this.paint.setColor(lineColor);this.paint.setAntiAlias(true);this.paint.setStrokeWidth(4.0F);float[] arrayOfFloat &#x3D; new float[4];arrayOfFloat[0] &#x3D; 8.0f;arrayOfFloat[1] &#x3D; 8.0f;arrayOfFloat[2] &#x3D; 8.0f;arrayOfFloat[3] &#x3D; 8.0f;&#x2F;&#x2F;设置虚线虚实的长度，必须为偶数个this.pe &#x3D; new DashPathEffect(arrayOfFloat, 1f);&#125;@Overrideprotected void onDraw(Canvas canvas) &#123;super.onDraw(canvas);this.path.moveTo(0.0F, 0.0F);this.path.lineTo(getMeasuredWidth(), 0.0F);this.paint.setPathEffect(this.pe);canvas.drawPath(this.path, this.paint);&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Android-studio-插件"><a href="#Android-studio-插件" class="headerlink" title="Android studio 插件"></a>Android studio 插件</h3><ul><li><a href="https://blog.csdn.net/lyj1005353553/article/details/55100563/">最全最好用的Android Studio插件整理</a></li></ul><ol><li>AndroidSourceViewer：查看源码</li><li>Translation:翻译</li><li>Android Studio Prettify：自动书写findviewbyid、字符串到资源文件</li><li>AndroidLocalizationer：自动生成string其他国家的语言</li></ol><h3 id="启动模式"><a href="#启动模式" class="headerlink" title="启动模式"></a>启动模式</h3><ul><li><strong>FLAG_ACTIVITY_NEW_TASK</strong>：这个标识会使新启动的Activity独立创建一个Task。<br><br></li><li><strong>FLAG_ACTIVITY_CLEAR_TOP</strong>：这个标识会使新启动的Activity检查是否存在于Task中，如果存在则清除其之上的Activity，使它获得焦点，并不重新实例化一个Activity，一般结合FLAG_ACTIVITY_NEW_TASK一起使用。<br><br><br></li><li><strong>FLAG_ACTIVITY_SINGLE_TOP</strong>：等同于在LauncherMode属性设置为singleTop。</li></ul><h3 id="RxJava1"><a href="#RxJava1" class="headerlink" title="RxJava1"></a>RxJava1</h3><h4 id="操作符："><a href="#操作符：" class="headerlink" title="操作符："></a>操作符：</h4><h5 id="map"><a href="#map" class="headerlink" title="map"></a>map</h5><blockquote><p>转换，将Object转换成Object</p></blockquote><h5 id="flatmap"><a href="#flatmap" class="headerlink" title="flatmap"></a>flatmap</h5><blockquote><p>转换，与map不同的是flatmap是将object转换成observable     </p></blockquote><h5 id="just"><a href="#just" class="headerlink" title="just"></a>just</h5><blockquote><p>处理数组或者单个的值</p></blockquote><h5 id="form"><a href="#form" class="headerlink" title="form"></a>form</h5><blockquote><p>处理数组，直接出来的是一个一个值，而just是直接出来整个数组</p></blockquote><h3 id="音频焦点"><a href="#音频焦点" class="headerlink" title="音频焦点"></a>音频焦点</h3><p>AudioFocus是控制音频焦点主要的类  </p><ol><li><p>requestAudioFous是请求焦点的方法；<br>返回是否请求成功<br>三个参数</p><blockquote><p>requestAudioFocus(OnAudioFocusChangeListener l, int streamType, int durationHint)  </p></blockquote><p> <em><strong>durationHint</strong></em></p><p> <strong>AUDIOFOCUS_GAIN</strong><br>代表此次申请的音频焦点需要长时间持有，原本获取了音频焦点的OnAudioFocusChangeListener 接口将会回调onAudioFocusChange(int focusChange) 方法，传入的参数为AUDIOFOCUS_LOSS。</p><p> <strong>AUDIOFOCUS_GAIN_TRANSIENT</strong><br>代表此次申请的音频焦点只需短暂持有，原本获取了音频焦点的OnAudioFocusChangeListener 接口将会回调onAudioFocusChange(int focusChange) 方法，传入的参数为AUDIOFOCUS_LOSS_TRANSIENT。按照官方注释：在接收到事件通知等情景时可使用该durationHint。</p><p> <strong>AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE</strong><br>代表此次申请的音频焦点只需短暂持有，原本获取了音频焦点的OnAudioFocusChangeListener 接口将会回调onAudioFocusChange(int focusChange) 方法，传入的参数为AUDIOFOCUS_LOSS_TRANSIENT。按照官方注释：在需要录音或语音识别等情景时可使用该durationHint。</p><p> <b>AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK</b><br>代表此次申请不需要暂停其它申请的音频播放，但是需要其降低音量。原本获取了音频焦点的OnAudioFocusChangeListener 接口将会回调onAudioFocusChange(int focusChange) 方法，传入的参数为AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK。</p><pre><code> int result = mAudioManager.requestAudioFocus(mFocusChangeListener, AudioManager.STREAM_MUSIC,         AudioManager.AUDIOFOCUS_GAIN_TRANSIENT); if (result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED) &#123;     mMediaPlayer.start(); &#125;</code></pre></li><li><p><strong>onAudioFocusChange</strong><br> _<strong>AudioManager.AUDIOFOCUS_GAIN</strong>_<br> _<strong>AudioManager.AUDIOFOCUS_LOSS</strong>_<br> <em><strong>AudioManager.AUDIOFOCUS_LOSS_TRANSIENT</strong></em><br> <em><strong>AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK</strong></em></p></li></ol><h3 id="Launcher"><a href="#Launcher" class="headerlink" title="Launcher"></a>Launcher</h3><ul><li><h4 id="设置应用为系统的launcher"><a href="#设置应用为系统的launcher" class="headerlink" title="设置应用为系统的launcher"></a>设置应用为系统的launcher</h4></li></ul><ol><li><p>在应用的AndroidManifest.xml文件中的作为Home界面的Activity的intent-filter节点中添加如下代码：</p><pre class="line-numbers language-none"><code class="language-none">&lt;category android:name&#x3D;&quot;android.intent.category.HOME&quot; &#x2F;&gt;&lt;category android:name&#x3D;&quot;android.intent.category.DEFAULT&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>将应用打包成build版本，将apk复制到/system/priv-app/应用名称的文件夹/中，查看apk中有没有os文件，如果有，将os文件复制到/system/lib/中，并在apk同级目录中新建/lib/arm/文件夹，创建刚刚导入os文件的软链接。</p></li><li><p>修改源码: frameworks/base/core/java/com/android/internal/app/ResolverActivity.java</p><pre><code> public int getDefaultHomePosition(String packageName)&#123;     for (int i = 0; i &lt; mList.size(); i++) &#123;         ResolveInfo info = mList.get(i).ri;         if (DEBUG)         Log.w(TAG,&quot;getDefaultHomePosition &quot; + info.activityInfo.packageName);         if (info.activityInfo.packageName.equals(packageName)) &#123;            return i;         &#125;     &#125;     return -1; &#125;</code></pre></li></ol><pre><code>1. 在ResolveListAdapter中添加getDefaultHomePosition(String packageName)方法，用于获取默认home app在List&lt;DisplayResolveInfo&gt; 中的位置，代码如下: 2. 在ResolverActivity中添加设置默认app的方法setupDefaultLauncher()，代码如下：<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;用于记录默认home app是否设置过private static final String DEFAULT_HOME &#x3D; &quot; home app包名&quot;;private void setupDefaultLauncher() &#123;    String first &#x3D; &quot;&quot;;    try&#123;        first &#x3D;  SystemProperties.get(DEFAULT_HOME);    &#125;catch(Exception e)&#123;        Log.w(TAG,&quot;exception error get DEFAULT_HOME&quot;);    &#125;    &#x2F;&#x2F;判断默认home 是否设置过，如果获取的字符串为空代表，未设置，否则return不在进行设置    if (!TextUtils.isEmpty(first)) &#123;        return;    &#125;    &#x2F;&#x2F;使用包名获取所需设置的默认home app在ResolveListAdapter中的位置    int position &#x3D; mAdapter.getDefaultHomePosition(&quot;home app包名&quot;);    &#x2F;&#x2F;如果不存在则return    if (position &#x3D;&#x3D; -1) &#123;        if (DEBUG)        Log.w(TAG,&quot;not find default Home&quot;);        return;    &#125;    &#x2F;&#x2F;设置默认home app后，则添加记录    try&#123;        SystemProperties.set(DEFAULT_HOME,DEFAULT_HOME);    &#125;catch(Exception e)&#123;        Log.w(TAG,&quot;exception error set DEFAULT_HOME&quot;);    &#125;    &#x2F;&#x2F;设置默认home app，并跳转    startSelected(position, true, true);    &#x2F;&#x2F;结束此activity    dismiss();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>3. 为了保证mAdapter被初始化 setupDefaultLauncher()的调用添加到ResolverActivity的onCreate函数中，代码如下：<pre class="line-numbers language-none"><code class="language-none">int count &#x3D; mAdapter.mList.size();&#x2F;&#x2F;添加的代码setupDefaultLauncher();&#x2F;&#x2F;原有逻辑&#x2F;&#x2F;如果系统中home app大于1if (count &gt; 1 || (count &#x3D;&#x3D; 1 &amp;&amp; mAdapter.getOtherProfile() !&#x3D; null)) &#123;    &#x2F;&#x2F;初始化代码    .........&#x2F;&#x2F;如果home app等于1则设置唯一的home app为Home&#125; else if (count &#x3D;&#x3D; 1) &#123;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><ol start="4"><li><p>编译framework代码，cd framework/base 执行 mm执行如下命令:</p><blockquote><p>adb remount<br>adb push framework-res.apk /system/framework/<br>adb push framework.jar /system/framework/<br>adb push services.jar /system/framework/ （如果有修改的话）以命令  </p></blockquote><p> 注意：有的系统编译framework后还生成了secondary_framework.jar，也需要push。</p></li><li><p>运行make snod生成新的system.img,然后使用adb进行刷机。</p></li><li><p>需要注意的问题：  </p><ol><li>Android应用里面通过gradle引用的第三方库中如果含有os库，也需要将这些文件拷贝到/system/lib文件中</li><li>可以使用git Bush查看os文件是32位还是64位，决定放进/system/lib还是/system/lib64中，命令为file *</li><li>查看应用中使用到的os文件可以通过解压apk文件，查看里面的libs文件夹中的文件。</li></ol></li></ol><h3 id="使用AleartDialog遇到的问题"><a href="#使用AleartDialog遇到的问题" class="headerlink" title="使用AleartDialog遇到的问题"></a>使用AleartDialog遇到的问题</h3><h4 id="1-弹出软键盘之后点击cancel之后dialog消失，但是键盘没有随之消失"><a href="#1-弹出软键盘之后点击cancel之后dialog消失，但是键盘没有随之消失" class="headerlink" title="1. 弹出软键盘之后点击cancel之后dialog消失，但是键盘没有随之消失"></a>1. 弹出软键盘之后点击cancel之后dialog消失，但是键盘没有随之消失</h4><p><strong>原因</strong>: 在清单文件此activity中添加</p><pre><code>    android:windowSoftInputMode=&quot;adjustPan|stateHidden&quot;</code></pre><p>导致键盘不能消失。</p><h4 id="2-在Android5-0系统中点击dialog外面不会自动消失需要添加setCanceledOnTouchOutside-true"><a href="#2-在Android5-0系统中点击dialog外面不会自动消失需要添加setCanceledOnTouchOutside-true" class="headerlink" title="2. 在Android5.0系统中点击dialog外面不会自动消失需要添加setCanceledOnTouchOutside(true)"></a>2. 在Android5.0系统中点击dialog外面不会自动消失需要添加setCanceledOnTouchOutside(true)</h4><h3 id="跳转到其他应用"><a href="#跳转到其他应用" class="headerlink" title="跳转到其他应用"></a>跳转到其他应用</h3><pre class="line-numbers language-none"><code class="language-none">private void openApp(String packageName) &#123;    final PackageManager packageManager &#x3D; mActivity.getPackageManager();    PackageInfo pi &#x3D; null;    try &#123;        pi &#x3D; mActivity.getPackageManager().getPackageInfo(packageName, 0);    &#125; catch (PackageManager.NameNotFoundException e) &#123;        e.printStackTrace();    &#125;    if (pi &#x3D;&#x3D; null || pi.packageName &#x3D;&#x3D; null) &#123;        tellUserResult(voicefragment.getString(R.string.not_installation), true);        return;    &#125;    Intent resolveIntent &#x3D; new Intent(Intent.ACTION_MAIN, null);    resolveIntent.addCategory(Intent.CATEGORY_LAUNCHER);    resolveIntent.setPackage(pi.packageName);    List&lt;ResolveInfo&gt; apps &#x3D; packageManager.queryIntentActivities(resolveIntent, 0);    ResolveInfo ri &#x3D; apps.iterator().next();    if (ri !&#x3D; null) &#123;        String pkgName &#x3D; ri.activityInfo.packageName;        String className &#x3D; ri.activityInfo.name;        Intent intent &#x3D; new Intent(Intent.ACTION_MAIN);        intent.addCategory(Intent.CATEGORY_LAUNCHER);        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);        ComponentName cn &#x3D; new ComponentName(pkgName, className);        intent.setComponent(cn);        mActivity.startActivity(intent);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="读取assets中的json文件"><a href="#读取assets中的json文件" class="headerlink" title="读取assets中的json文件"></a>读取assets中的json文件</h3><pre class="line-numbers language-none"><code class="language-none">public String getJson(String fileName) &#123;    StringBuilder stringBuilder &#x3D; new StringBuilder();    try &#123;        AssetManager assetManager &#x3D; mActivity.getAssets();        BufferedReader bf &#x3D; new BufferedReader(new InputStreamReader(                assetManager.open(fileName)));        String line;        while ((line &#x3D; bf.readLine()) !&#x3D; null) &#123;            stringBuilder.append(line);        &#125;    &#125; catch (IOException e) &#123;        e.printStackTrace();    &#125;    return stringBuilder.toString();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="TTS"><a href="#TTS" class="headerlink" title="TTS"></a>TTS</h3><p>UtteranceProgressListener 没有起作用，原因是</p><ol><li>和 OnUtteranceCompletedListener  一起使用会造成冲突</li><li>textToSpeech.speak(playText, TextToSpeech.QUEUE_FLUSH, null,String.valueOf(map)); 第三个参数需要传入utteranceID，才可以激活listener</li></ol><h3 id="switchButton"><a href="#switchButton" class="headerlink" title="switchButton"></a>switchButton</h3><p><a href="https://github.com/iielse/SwitchButton">switchbutton</a></p><blockquote><p>implementation ‘ch.ielse:switchbutton:1.0.1’</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ch.ielse.view.SwitchView</span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">switchView<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> isOpened <span class="token operator">=</span> switchView<span class="token punctuation">.</span><span class="token function">isOpened</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>view<span class="token punctuation">.</span><span class="token function">toggleSwitch</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// or false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="保留两位小数处理"><a href="#保留两位小数处理" class="headerlink" title="保留两位小数处理"></a>保留两位小数处理</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token string">"36"</span><span class="token punctuation">;</span><span class="token class-name">DecimalFormat</span> format <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">"0.00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>format<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="recyclerView-添加分割线"><a href="#recyclerView-添加分割线" class="headerlink" title="recyclerView 添加分割线"></a>recyclerView 添加分割线</h3><blockquote><p>recyclerview.addItemDecoration(new DividerItemDecoration(context,orientation))</p></blockquote><p><strong>自定义 DividerItemDecoration</strong></p><p><a href="https://blog.csdn.net/Heijinbaitu/article/details/81170314">参考1</a></p><p><a href="https://jayfeng.com/2016/03/01/%E8%B0%88%E8%B0%88Android%E4%B8%AD%E7%9A%84Divider/">参考2</a> 实现改变分割线长度的自定义divider</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shape</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--分割线的高度，横向的RecyclerView,这里设置宽度即可--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>size</span> <span class="token attr-name"><span class="token namespace">android:</span>height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1dp<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1dp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--分割线的颜色--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>solid</span> <span class="token attr-name"><span class="token namespace">android:</span>color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@color/gray<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shape</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DividerItemDecoration</span> dividerItemDecoration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DividerItemDecoration</span><span class="token punctuation">(</span>mActivity<span class="token punctuation">,</span>        <span class="token class-name">DividerItemDecoration</span><span class="token punctuation">.</span>VERTICAL<span class="token punctuation">)</span><span class="token punctuation">;</span>dividerItemDecoration<span class="token punctuation">.</span><span class="token function">setDrawable</span><span class="token punctuation">(</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDrawable</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>divider<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
